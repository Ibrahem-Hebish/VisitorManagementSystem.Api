// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.CentralTenantsDatabase;

#nullable disable

namespace Persistence.Migrations.Shared
{
    [DbContext(typeof(SharedDbContext))]
    partial class SharedDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.Branches.SharedBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SharedBranch", (string)null);
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.SharedUsers.SharedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("SharedUser", (string)null);
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.Tenants.SharedTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("SharedTenants", (string)null);
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.UserTokens.SharedUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("AccessTokenExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InUse")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RefreshTokenExpiredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("SharedUserToken", (string)null);
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.Branches.SharedBranch", b =>
                {
                    b.HasOne("Domain.SharedTenantMetadataEntities.Tenants.SharedTenant", "Tenant")
                        .WithMany("Branches")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.SharedTenantMetadataEntities.Branches.ObjectValues.SharedBranchAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("SharedBranchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SharedBranchId");

                            b1.ToTable("SharedBranch");

                            b1.WithOwner()
                                .HasForeignKey("SharedBranchId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.SharedUsers.SharedUser", b =>
                {
                    b.HasOne("Domain.SharedTenantMetadataEntities.Branches.SharedBranch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.Tenants.SharedTenant", b =>
                {
                    b.HasOne("Domain.SharedTenantMetadataEntities.SharedUsers.SharedUser", "Manager")
                        .WithOne()
                        .HasForeignKey("Domain.SharedTenantMetadataEntities.Tenants.SharedTenant", "ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.UserTokens.SharedUserToken", b =>
                {
                    b.HasOne("Domain.SharedTenantMetadataEntities.Branches.SharedBranch", "SharedBranch")
                        .WithMany("sharedUserTokens")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SharedBranch");
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.Branches.SharedBranch", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("sharedUserTokens");
                });

            modelBuilder.Entity("Domain.SharedTenantMetadataEntities.Tenants.SharedTenant", b =>
                {
                    b.Navigation("Branches");
                });
#pragma warning restore 612, 618
        }
    }
}
