// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.TenantDb;

#nullable disable

namespace Persistence.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20250829030515_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AttachmentId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermitId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("Domain.Belongings.Belonging", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermitId");

                    b.ToTable("Belonging", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Branches.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("Domain.Buildings.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FloorNumbers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Building", (string)null);
                });

            modelBuilder.Entity("Domain.EntryLogs.Entrylog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AllowedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInside")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AllowedBy");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermitId")
                        .IsUnique();

                    b.HasIndex("VisitorId");

                    b.HasIndex("PermitId", "BranchId");

                    b.ToTable("Entrylog", (string)null);
                });

            modelBuilder.Entity("Domain.PermitTracks.PermitTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermitTrackAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PermitId", "BranchId");

                    b.ToTable("PermitTrack", (string)null);
                });

            modelBuilder.Entity("Domain.PermitUpdateRequests.PermitUpdateRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermitUpdateAction")
                        .HasColumnType("int");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("PermitId", "BranchId");

                    b.ToTable("PermitUpdateRequest", (string)null);
                });

            modelBuilder.Entity("Domain.Permits.Permit", b =>
                {
                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("HandledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("RequestedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PermitId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("Status");

                    b.ToTable("Permit", (string)null);
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Tenants.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("Domain.Tokens.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AccessTokenExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InUse")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.VisitorPermits.VisitorPermit", b =>
                {
                    b.Property<Guid>("PermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermitId", "VisitorId");

                    b.HasIndex("BranchId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorPermit", (string)null);
                });

            modelBuilder.Entity("Domain.Visitors.Visitor", b =>
                {
                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("VisitorId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.ToTable("Visitor", (string)null);
                });

            modelBuilder.Entity("Domain.Belongings.Car", b =>
                {
                    b.HasBaseType("Domain.Belongings.Belonging");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("Domain.Users.Employee", b =>
                {
                    b.HasBaseType("Domain.Users.User");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Domain.Users.Manager", b =>
                {
                    b.HasBaseType("Domain.Users.Employee");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("Domain.Users.Requester", b =>
                {
                    b.HasBaseType("Domain.Users.Employee");

                    b.ToTable("Requester", (string)null);
                });

            modelBuilder.Entity("Domain.Users.Security", b =>
                {
                    b.HasBaseType("Domain.Users.Employee");

                    b.ToTable("Security", (string)null);
                });

            modelBuilder.Entity("Domain.Attachments.Attachment", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("Attachments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Permits.Permit", "Permit")
                        .WithMany("Attachments")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("Domain.Belongings.Belonging", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("Belongings")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Permits.Permit", "Permit")
                        .WithMany("Belongings")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("Domain.Branches.Branch", b =>
                {
                    b.HasOne("Domain.Tenants.Tenant", "Tenant")
                        .WithMany("Branches")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Domain.Branches.ObjectValues.BranchAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branch");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.Buildings.Building", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("Buildings")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Domain.EntryLogs.Entrylog", b =>
                {
                    b.HasOne("Domain.Users.Security", "Employee")
                        .WithMany("Entrylogs")
                        .HasForeignKey("AllowedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("EntryLogs")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Permits.Permit", "Permit")
                        .WithOne()
                        .HasForeignKey("Domain.EntryLogs.Entrylog", "PermitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Visitors.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Permit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Domain.PermitTracks.PermitTrack", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("PermitTrack")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.Employee", "HandledBy")
                        .WithMany("PermitTracks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Permits.Permit", "Permit")
                        .WithMany("PermitTracks")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("HandledBy");

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("Domain.PermitUpdateRequests.PermitUpdateRequest", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("PermitUpdateRequest")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Permits.Permit", "Permit")
                        .WithMany("PermitUpdateRequest")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Users.Requester", "Requester")
                        .WithMany("PermitUpdateRequest")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permit");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Domain.Permits.Permit", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("Permits")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Buildings.Building", "Building")
                        .WithMany("Permits")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Users.Manager", "Handler")
                        .WithMany("Permits")
                        .HasForeignKey("HandledBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Users.Requester", "Requester")
                        .WithMany("Permits")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Building");

                    b.Navigation("Handler");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Domain.Tokens.UserToken", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Roles.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.VisitorPermits.VisitorPermit", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("VisitorPermits")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Permits.Permit", "Permit")
                        .WithMany("VisitorPermits")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Visitors.Visitor", "Visitor")
                        .WithMany("VisitorPermits")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Domain.Visitors.Visitor", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("Visitors")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Domain.Belongings.Car", b =>
                {
                    b.HasOne("Domain.Belongings.Belonging", null)
                        .WithOne()
                        .HasForeignKey("Domain.Belongings.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.Employee", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Users.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.Users.Manager", b =>
                {
                    b.HasOne("Domain.Users.Employee", null)
                        .WithOne()
                        .HasForeignKey("Domain.Users.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.Requester", b =>
                {
                    b.HasOne("Domain.Users.Employee", null)
                        .WithOne()
                        .HasForeignKey("Domain.Users.Requester", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.Security", b =>
                {
                    b.HasOne("Domain.Users.Employee", null)
                        .WithOne()
                        .HasForeignKey("Domain.Users.Security", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Branches.Branch", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Belongings");

                    b.Navigation("Buildings");

                    b.Navigation("Employees");

                    b.Navigation("EntryLogs");

                    b.Navigation("PermitTrack");

                    b.Navigation("PermitUpdateRequest");

                    b.Navigation("Permits");

                    b.Navigation("VisitorPermits");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("Domain.Buildings.Building", b =>
                {
                    b.Navigation("Permits");
                });

            modelBuilder.Entity("Domain.Permits.Permit", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Belongings");

                    b.Navigation("PermitTracks");

                    b.Navigation("PermitUpdateRequest");

                    b.Navigation("VisitorPermits");
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Tenants.Tenant", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Domain.Visitors.Visitor", b =>
                {
                    b.Navigation("VisitorPermits");
                });

            modelBuilder.Entity("Domain.Users.Employee", b =>
                {
                    b.Navigation("PermitTracks");
                });

            modelBuilder.Entity("Domain.Users.Manager", b =>
                {
                    b.Navigation("Permits");
                });

            modelBuilder.Entity("Domain.Users.Requester", b =>
                {
                    b.Navigation("PermitUpdateRequest");

                    b.Navigation("Permits");
                });

            modelBuilder.Entity("Domain.Users.Security", b =>
                {
                    b.Navigation("Entrylogs");
                });
#pragma warning restore 612, 618
        }
    }
}
